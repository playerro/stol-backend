<?php

namespace App\Services;

use App\Enums\SupportCategory;
use App\Filament\Resources\ReceiptResource;
use App\Models\Clients\TgUser;
use App\Models\Offer;
use App\Models\Receipt;
use App\Models\Support\SupportMessage;
use App\Models\Support\SupportTicket;
use SergiX44\Nutgram\Nutgram;
use SergiX44\Nutgram\Telegram\Properties\ParseMode;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardButton;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardMarkup;

class NotificationBotService
{
    public function __construct(protected Nutgram $bot)
    {
    }

    public function notifyAdmins(Receipt $receipt): void
    {
        $user    = $receipt->tgUser;
        $url     = ReceiptResource::getUrl('edit', ['record' => $receipt]);
        $message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {$user->telegram_id} –∑–∞–≥—Ä—É–∑–∏–ª —á–µ–∫ –Ω–∞ —Å—É–º–º—É: {$receipt->total_sum} ‚ÇΩ.\n"
            . "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {$url}";

        foreach (config('nutgram.admins') as $chatId) {
            $this->bot->sendMessage(text: $message, chat_id: $chatId, disable_web_page_preview: true);
        }
    }

    public function notifyGoldenApplePurchase(TgUser $user, Offer $offer, int $purchaseId): void
    {
        $username = config('app.manager_username');
        $link = "https://t.me/{$username}";
        $text = <<<HTML
<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã "{$offer->name}"!</b>

–ú–Ω–µ –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å –µ—ë —Ç–µ–±–µ. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ó–æ–ª–æ—Ç–æ–≥–æ –Ø–±–ª–æ–∫–∞, –≤—ã–ø–æ–ª–Ω–∏ —à–∞–≥–∏:

1) –ø–µ—Ä–µ–π–¥–∏ –≤ –¥–∏–∞–ª–æ–≥ —Å <b>@{$username}</b> (–∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)
2) –Ω–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –ó–Ø
3) –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É
HTML;

        $this->bot->sendMessage(
            text: $text,
            chat_id: $user->telegram_id,
            parse_mode: ParseMode::HTML,
            reply_markup: InlineKeyboardMarkup::make()->addRow(
                InlineKeyboardButton::make(text: '–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥', url: $link)
            )
        );
    }

    public function supportNotifyAdminsTicketCreated(SupportTicket $ticket): void
    {
        $userLabel = ($ticket->user?->username) ?? ($ticket->user?->telegram_id) ?? '‚Äî';

        $categoryText = $ticket->category instanceof SupportCategory
            ? $ticket->category->getLabel()
            : (string)$ticket->category; //–∏–∑–º–µ–Ω–µ–Ω–æ

        $text =
            "üÜï –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{$ticket->id}\n\n".
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$userLabel}\n".
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {$categoryText}\n".
            "–¢–µ–º–∞: {$ticket->topic}\n\n".
            (filled($ticket->body) ? "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{$ticket->body}" : '');

        $this->toAdmins($text);
    }

    /** –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ç–∏–∫–µ—Ç–µ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */
    public function supportNotifyAdminsTicketReply(SupportTicket $ticket, SupportMessage $lastMessage): void
    {
        $userLabel = ($ticket->user?->username) ?? ($ticket->user?->telegram_id) ?? '‚Äî';

        $text =
            "‚úâÔ∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{$ticket->id}\n\n".
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {$userLabel}\n\n".
            "–°–æ–æ–±—â–µ–Ω–∏–µ:\n{$lastMessage->message}";

        $this->toAdmins($text);
    }

    /** –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ */
    public function supportNotifyUserAnswer(SupportTicket $ticket, string $answer): void
    {
        $chatId = $ticket->user?->telegram_id ?? null;
        if (!$chatId) return;

        $kb = InlineKeyboardMarkup::make()
            ->addRow(
                InlineKeyboardButton::make(
                    text: '–í–æ–ø—Ä–æ—Å —Ä–µ—à—ë–Ω',
                    callback_data: 'support.resolved.'.$ticket->id
                ),
                InlineKeyboardButton::make(
                    text: '–û—Ç–≤–µ—Ç–∏—Ç—å',
                    callback_data: 'support.reply.'.$ticket->id
                ),
            );

        $this->bot->sendMessage(
            text: "–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n{$answer}",
            chat_id: $chatId,
            reply_markup: $kb
        );
    }

    /** –ü—Ä–æ—Å—Ç–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: –æ–∂–∏–¥–∞–µ–º –º–∞—Å—Å–∏–≤ chat_id –≤ config('nutgram.admins') */ //–∏–∑–º–µ–Ω–µ–Ω–æ
    protected function toAdmins(string $text, ?InlineKeyboardMarkup $kb = null): void
    {
        $admins = config('nutgram.admins');
        if (!is_array($admins) || $admins === []) {
            return;
        }

        foreach ($admins as $chatId) {
            try {
                $this->bot->sendMessage(
                    text: $text,
                    chat_id: $chatId,
                    reply_markup: $kb
                );
            } catch (\Throwable) {
                // –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            }
        }
    }

}
