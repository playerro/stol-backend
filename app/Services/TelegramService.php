<?php

namespace App\Services;

use App\Models\Clients\TgUser;
use Exception;
use SergiX44\Nutgram\Nutgram;
use SergiX44\Nutgram\Telegram\Types\Command\MenuButtonWebApp;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardButton;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardMarkup;

class TelegramService
{
    public function __construct(protected TgUserService $userService)
    {
    }

    public function handleStart(Nutgram $bot): void
    {
        try {

            if ($bot->user()) {
                $user = $this->userService->getUser($bot);

                $this->sendStartingMessage($bot, $user);

            } else {
                $bot->sendMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
            }
        } catch (Exception $exception) {
            $bot->sendMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }

    public function handleMessage(Nutgram $bot, string $message = null): void
    {
        try {
            if (! $bot->user()) {
                $bot->sendMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
                return;
            }

            $text = $bot->message()->text;
            $parts = explode(' ', trim($text), 2);
            $referralToken = $parts[1] ?? null;

            $user = $this->userService->getUser($bot, $referralToken);
            $this->sendStartingMessage($bot, $user);

        } catch (Exception $exception) {
            $bot->sendMessage('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }


    public function sendStartingMessage(Nutgram $bot, TgUser $user): void
    {
        $webAppInfo = $this->userService->getAppLink($user->id);
        $bot->setChatMenuButton(chat_id: $user->telegram_id, menu_button: new MenuButtonWebApp('STOL', $webAppInfo));
        $bot->sendMessage(
            text: <<<HTML
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ STOL!üëã</b>

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã –∑–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤ —á–µ–∫–æ–≤ –∏–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤, –∫–∞—Ñ–µ –∏ —Å–ª—É–∂–± –¥–æ—Å—Ç–∞–≤–æ–∫.

–ë–∞–ª–ª—ã –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–∫–∏–¥–æ—á–Ω—ã–µ –∫—É–ø–æ–Ω—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤, –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!

–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –µ—â–µ –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤!

<b>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ STOL:</b>
HTML,
            parse_mode: 'HTML',
            reply_markup: InlineKeyboardMarkup::make()->addRow(
                InlineKeyboardButton::make(text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                    web_app: $webAppInfo)
            )
        );
    }
}
