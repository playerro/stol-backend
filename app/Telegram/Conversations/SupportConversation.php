<?php

namespace App\Telegram\Conversations;

use App\Enums\SupportCategory;
use App\Models\Clients\TgUser;
use App\Services\SupportService;
use App\Services\TgUserService;
use App\Services\NotificationBotService;
use SergiX44\Nutgram\Conversations\Conversation;
use SergiX44\Nutgram\Nutgram;
use SergiX44\Nutgram\Telegram\Properties\ParseMode;
use SergiX44\Nutgram\Telegram\Types\Internal\InputFile;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardButton;
use SergiX44\Nutgram\Telegram\Types\Keyboard\InlineKeyboardMarkup;

class SupportConversation extends Conversation
{
    /** –ê–±—Å. –ø—É—Ç—å –≤ storage/, –ë–ï–ó –¥–∏—Å–∫–æ–≤/URL */
    private const MASCOT_STORAGE_RELATIVE = 'images/donny1.png';

    private ?SupportCategory $category = null;
    private ?string $topic = null;
    private ?string $text = null;

    public function __construct(
        protected TgUserService $userService,
        protected SupportService $support,
        protected NotificationBotService $notify
    ) {}

    /** /support */
    public function start(Nutgram $bot): void
    {
        $chatId = $bot->chatId();

        // 1) –ú–∞—Å–∫–æ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏–∑ storage_path()
        $photoPath = storage_path(self::MASCOT_STORAGE_RELATIVE);
        if (is_file($photoPath)) {
            try {
                $bot->sendPhoto(
                    photo: InputFile::make($photoPath),
                    chat_id: $chatId,
                    caption: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π STOL!',
                    parse_mode: ParseMode::HTML
                );
            } catch (\Throwable $th) {
                $bot->sendMessage($th->getMessage());
            }
        }

        $pairs = [
            [SupportCategory::Points,    SupportCategory::Purchase],
            [SupportCategory::Scan,      SupportCategory::Bug],
            [SupportCategory::Rank,      SupportCategory::Cooperation],
            [SupportCategory::Other,     null], // —Å–ø—Ä–∞–≤–∞ ¬´–û—Ç–º–µ–Ω–∞¬ª
        ];

        $kb = InlineKeyboardMarkup::make();
        foreach ($pairs as [$left, $right]) {
            $row = [];
            if ($left) {
                $row[] = InlineKeyboardButton::make(
                    text: $left->getLabel(),
                    callback_data: 'support.cat.'.$left->value
                );
            }
            if ($right instanceof SupportCategory) {
                $row[] = InlineKeyboardButton::make(
                    text: $right->getLabel(),
                    callback_data: 'support.cat.'.$right->value
                );
            } else {
                $row[] = InlineKeyboardButton::make(text: '–û—Ç–º–µ–Ω–∞', callback_data: 'support.cancel');
            }
            $kb->addRow(...$row);
        }

        try {
            $bot->sendMessage(
                text: "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å? –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π —ç—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è:",
                chat_id: $chatId,
                reply_markup: $kb
            );
        } catch (\Throwable $th) {
            $bot->sendMessage($th->getMessage());
        }

        $this->next('chooseCategory');
    }

    /** –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */
    public function chooseCategory(Nutgram $bot): void
    {
        if ($bot->callbackQuery()) {
            try { $bot->answerCallbackQuery(); } catch (\Throwable) {}
        }
        if (!$bot->callbackQuery()) {
            return;
        }

        $data = $bot->callbackQuery()->data;                                        //–∏–∑–º–µ–Ω–µ–Ω–æ: –≤–≤–µ–ª–∏ $data

        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –û—Ç–º–µ–Ω—ã –ø—Ä—è–º–æ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ (—á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç)
        if ($data === 'support.cancel') {                                            //–∏–∑–º–µ–Ω–µ–Ω–æ
            try {
                $bot->sendMessage(
                    text: '–û—Ç–º–µ–Ω–∏–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º ü´∂',
                    chat_id: $bot->chatId()
                );
            } catch (\Throwable) {}
            $this->end();                                                            //–∏–∑–º–µ–Ω–µ–Ω–æ
            return;                                                                  //–∏–∑–º–µ–Ω–µ–Ω–æ
        }

        if (!str_starts_with($data, 'support.cat.')) {                               //–∏–∑–º–µ–Ω–µ–Ω–æ
            return;
        }

        $value = explode('support.cat.', $data)[1] ?? null;                          //–∏–∑–º–µ–Ω–µ–Ω–æ
        $this->category = SupportCategory::tryFromValue($value);
        if (!$this->category) {
            return;
        }

        if (in_array($this->category, [
            SupportCategory::Points,
            SupportCategory::Purchase,
            SupportCategory::Scan,
            SupportCategory::Bug,
            SupportCategory::Rank,
        ], true)) {
            $this->askTopic($bot);
        } elseif ($this->category === SupportCategory::Cooperation) {
            $this->askCoopType($bot);
        } elseif ($this->category === SupportCategory::Other) {
            $this->askOtherType($bot);
        }
    }

    /** –ø–æ–¥-—Ç–∏–ø—ã */
    private function askTopic(Nutgram $bot): void
    {
        $chatId = $bot->chatId();

        $map = [
            SupportCategory::Points->value   => ['–ë–∞–ª–ª—ã –Ω–µ –Ω–∞—á–∏—Å–ª–∏–ª–∏—Å—å','–ë–∞–ª–ª—ã –ø—Ä–æ–ø–∞–ª–∏','–î—Ä—É–≥–æ–µ'],
            SupportCategory::Purchase->value => ['–ù–µ –ø—Ä–∏—à–µ–ª —Ç–æ–≤–∞—Ä','–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ','–¢–æ–≤–∞—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç','–î—Ä—É–≥–æ–µ'],
            SupportCategory::Scan->value     => ['–ö–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è','QR –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è','–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è','–î—Ä—É–≥–æ–µ'],
            SupportCategory::Bug->value      => ['–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã–ª–µ—Ç–∞–µ—Ç','–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞','–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö','–î—Ä—É–≥–æ–µ'],
            SupportCategory::Rank->value     => ['–†–∞–Ω–≥ –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è','–†–∞–Ω–≥ —Å–±—Ä–æ—Å–∏–ª—Å—è','–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–Ω–≥','–î—Ä—É–≥–æ–µ'],
        ];

        $buttons = $map[$this->category->value] ?? ['–î—Ä—É–≥–æ–µ'];

        $kb = InlineKeyboardMarkup::make();
        foreach ($buttons as $b) {
            $kb->addRow(InlineKeyboardButton::make(text: $b, callback_data: 'support.topic.'.$b));
        }
        $kb->addRow(InlineKeyboardButton::make(text: '–ù–∞–∑–∞–¥', callback_data: 'support.back.root'));

        try {
            $bot->sendMessage(
                text: "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{$this->category->getLabel()}¬ª.",
                chat_id: $chatId,
                reply_markup: $kb
            );
        } catch (\Throwable) {
            return;
        }

        $this->next('chooseTopic');
    }

    public function chooseTopic(Nutgram $bot): void
    {
        if ($bot->callbackQuery()) {
            try { $bot->answerCallbackQuery(); } catch (\Throwable) {}
        }
        if (!$bot->callbackQuery()) return;

        $data = $bot->callbackQuery()->data;

        if ($data === 'support.back.root') {
            $this->start($bot);
            return;
        }

        if (!str_starts_with($data, 'support.topic.')) return;

        $this->topic = explode('support.topic.', $data)[1];

        try {
            $bot->sendMessage(
                text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.',
                chat_id: $bot->chatId()
            );
        } catch (\Throwable) {
            return;
        }

        $this->next('collectText');
    }

    private function askCoopType(Nutgram $bot): void
    {
        $kb = InlineKeyboardMarkup::make()
            ->addRow(
                InlineKeyboardButton::make(text: '–†–µ–∫–ª–∞–º–∞', callback_data: 'support.topic.–†–µ–∫–ª–∞–º–∞'),
                InlineKeyboardButton::make(text: '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', callback_data: 'support.topic.–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'),
            )->addRow(
                InlineKeyboardButton::make(text: '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'support.topic.–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏'),
                InlineKeyboardButton::make(text: 'B2B —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ', callback_data: 'support.topic.B2B —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ'),
            )->addRow(
                InlineKeyboardButton::make(text: '–î—Ä—É–≥–æ–µ', callback_data: 'support.topic.–î—Ä—É–≥–æ–µ')
            )->addRow(
                InlineKeyboardButton::make(text: '–ù–∞–∑–∞–¥', callback_data: 'support.back.root')
            );

        try {
            $bot->sendMessage(
                text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∏–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.',
                chat_id: $bot->chatId(),
                reply_markup: $kb
            );
        } catch (\Throwable) {
            return;
        }

        $this->next('chooseTopic');
    }

    private function askOtherType(Nutgram $bot): void
    {
        $kb = InlineKeyboardMarkup::make()
            ->addRow(
                InlineKeyboardButton::make(text: '–í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É', callback_data: 'support.topic.–í–æ–ø—Ä–æ—Å –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É'),
                InlineKeyboardButton::make(text: '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'support.topic.–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å'),
            )->addRow(
                InlineKeyboardButton::make(text: '–î—Ä—É–≥–æ–µ', callback_data: 'support.topic.–î—Ä—É–≥–æ–µ')
            )->addRow(
                InlineKeyboardButton::make(text: '–ù–∞–∑–∞–¥', callback_data: 'support.back.root')
            );

        try {
            $bot->sendMessage(
                text: '–•–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º–∞.',
                chat_id: $bot->chatId(),
                reply_markup: $kb
            );
        } catch (\Throwable) {
            return;
        }

        $this->next('chooseTopic');
    }

    public function collectText(Nutgram $bot): void
    {
        if ($bot->isCallbackQuery()) {
            try { $bot->answerCallbackQuery(); } catch (\Throwable) {}
            return;
        }

        $this->text = trim($bot->message()?->text ?? '');
        if ($this->text === '') {
            try {
                $bot->sendMessage(
                    text: '–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–º.',
                    chat_id: $bot->chatId()
                );
            } catch (\Throwable) {}
            $this->next('collectText');
            return;
        }

        $kb = InlineKeyboardMarkup::make()
            ->addRow(
                InlineKeyboardButton::make(text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'support.send'),
                InlineKeyboardButton::make(text: '–ù–∞–∑–∞–¥', callback_data: 'support.back.topic'),
            );

        try {
            $bot->sendMessage(
                text: "–ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {$this->category->getLabel()}\n–¢–µ–º–∞: {$this->topic}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{$this->text}",
                chat_id: $bot->chatId(),
                reply_markup: $kb
            );
        } catch (\Throwable) {
            return;
        }

        $this->next('confirmSend');
    }

    public function confirmSend(Nutgram $bot): void
    {
        if ($bot->callbackQuery()) {
            try { $bot->answerCallbackQuery(); } catch (\Throwable) {}
        }
        if (!$bot->callbackQuery()) return;

        $data = $bot->callbackQuery()->data;

        if ($data === 'support.back.topic') {
            $this->askTopic($bot);
            return;
        }
        if ($data !== 'support.send') return;

        /** @var TgUser $user */
        $user = $this->userService->getByTelegramId($bot->userId());
        if (!$user || !$this->category) {
            try {
                $bot->sendMessage(
                    text: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
                    chat_id: $bot->chatId()
                );
            } catch (\Throwable) {}
            $this->end();
            return;
        }

        // —Å–æ–∑–¥–∞—ë–º —Ç–∏–∫–µ—Ç
        $ticket = $this->support->openTicket($user, $this->category, $this->topic, $this->text);

        // —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try {
            $this->notify->supportTicketCreated($user, $ticket);
            $this->notify->supportNotifyAdmins($ticket);
        } catch (\Throwable) {
            // –≥–ª—É—à–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å
        }

        if ($this->category === SupportCategory::Cooperation) {
            try {
                $bot->sendMessage(
                    text: '–û–≥–æ, –∑–≤—É—á–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –Ø –∏–∑—É—á—É –∏–¥–µ—é –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—èü´∂',
                    chat_id: $bot->chatId()
                );
            } catch (\Throwable) {}
        }

        $this->end();
    }
}
